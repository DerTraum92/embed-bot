require("dotenv").config();
const fs = require("fs");
const express = require("express");
const {
  Client,
  GatewayIntentBits,
  Partials,
  REST,
  Routes,
  SlashCommandBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  EmbedBuilder,
  StringSelectMenuBuilder,
  WebhookClient,
} = require("discord.js");

const app = express(); // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
const client = new Client({
  intents: [GatewayIntentBits.Guilds],
  partials: [Partials.Channel],
});

const rest = new REST({ version: "10" }).setToken(process.env.TOKEN);

// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /embed
const commands = [
  new SlashCommandBuilder()
    .setName("embed")
    .setDescription("–°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å embed-—Å–æ–æ–±—â–µ–Ω–∏–µ"),
].map((c) => c.toJSON());

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
const saveSessions = () => {
  const sessionsToSave = {};
  for (const [userId, session] of userSessions.entries()) {
    sessionsToSave[userId] = {
      embeds: session.embeds.map((embed) => embed.toJSON()),
      content: session.content || "",
      attachment: session.attachment || "",
    };
  }
  fs.writeFileSync("./sessions.json", JSON.stringify(sessionsToSave, null, 2));
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
const loadSessions = () => {
  try {
    if (fs.existsSync("./sessions.json")) {
      const savedSessions = JSON.parse(
        fs.readFileSync("./sessions.json", "utf8"),
      );
      for (const [userId, session] of Object.entries(savedSessions)) {
        const embeds = session.embeds.map((embedData) => {
          // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          if (embedData.fields) {
            embedData.fields = embedData.fields.filter(
              (f) => f.name && f.value,
            );
          }
          return EmbedBuilder.from(embedData);
        });
        userSessions.set(userId, {
          embeds,
          content: session.content || "",
          attachment: session.attachment || "",
        });
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:", error);
  }
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤
const logAdmin = (msg) => {
  const timestamp = new Date().toISOString();
  fs.appendFileSync("./admin-log.txt", `${timestamp} | ${msg}\n`);
};

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const createMainMenu = () => {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId("add_embed")
      .setLabel("‚ûï –î–æ–±–∞–≤–∏—Ç—å embed")
      .setStyle(ButtonStyle.Primary),
    new ButtonBuilder()
      .setCustomId("edit_embed")
      .setLabel("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å embed")
      .setStyle(ButtonStyle.Secondary),
    new ButtonBuilder()
      .setCustomId("delete_embed")
      .setLabel("üóë –£–¥–∞–ª–∏—Ç—å embed")
      .setStyle(ButtonStyle.Danger),
    new ButtonBuilder()
      .setCustomId("set_content")
      .setLabel("üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
      .setStyle(ButtonStyle.Secondary),
    new ButtonBuilder()
      .setCustomId("preview_send")
      .setLabel("üì§ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞")
      .setStyle(ButtonStyle.Success),
  );
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
client.once("ready", async () => {
  console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
  loadSessions();

  try {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
    await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), {
      body: [],
    });
    console.log("üßπ –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—â–µ–Ω—ã");

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), {
      body: commands,
    });
    console.log("‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
client.on("interactionCreate", async (interaction) => {
  try {
    const userId = interaction.user.id;

    if (
      interaction.isChatInputCommand() &&
      interaction.commandName === "embed"
    ) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!interaction.member.permissions.has("Administrator")) {
        return await interaction.reply({
          content: "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
          ephemeral: true,
        });
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!userSessions.has(userId)) {
        userSessions.set(userId, { embeds: [], content: "", attachment: "" });
      }

      const session = userSessions.get(userId);
      const embedCount = session.embeds.length;

      return await interaction.reply({
        content: `üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ embed-—Å–æ–æ–±—â–µ–Ω–∏–µ–º**\nüìä –°–æ–∑–¥–∞–Ω–æ embeds: ${embedCount}`,
        components: [createMainMenu()],
        ephemeral: true,
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if (interaction.isButton()) {
      const session = userSessions.get(userId) || {
        embeds: [],
        content: "",
        attachment: "",
      };

      switch (interaction.customId) {
        case "preview_send":
          if (session.embeds.length === 0 && !session.content) {
            return await interaction.reply({
              content:
                "‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å. –°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω embed –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.",
              ephemeral: true,
            });
          }

          const previewButtons = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId("confirm_send")
              .setLabel("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
              .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
              .setCustomId("back_to_menu")
              .setLabel("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
              .setStyle(ButtonStyle.Secondary),
          );

          return await interaction.reply({
            content: `üì¶ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:**\nüìù –¢–µ–∫—Å—Ç: ${session.content || "_–Ω–µ –∑–∞–¥–∞–Ω_"}\nüñº –í–ª–æ–∂–µ–Ω–∏–µ: ${session.attachment || "_–Ω–µ –∑–∞–¥–∞–Ω–æ_"}\nüìä Embeds: ${session.embeds.length}`,
            embeds: session.embeds,
            components: [previewButtons],
            ephemeral: true,
          });

        case "confirm_send":
          const webhooks = await interaction.channel.fetchWebhooks();
          const availableWebhooks = webhooks.filter(webhook => webhook.token);

          if (availableWebhooks.size === 0) {
            // –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            const channel = interaction.channel;
            const newWebhook = await channel.createWebhook({
              name: "Embed Bot Webhook",
              avatar: client.user.avatarURL(),
            });

            logAdmin(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channel.name}`);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const webhook = new WebhookClient({
              id: newWebhook.id,
              token: newWebhook.token,
            });

            await sendEmbedMessage(webhook, session);
          } else {
            const webhook = availableWebhooks.first();
            await sendEmbedMessage(webhook, session);
          }

          // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
          userSessions.delete(userId);
          saveSessions();

          return await interaction.update({
            content: "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            embeds: [],
            components: [],
          });
      }
    }

    async function sendEmbedMessage(webhook, session) {
      const files = [];
      if (session.attachment && session.attachment.startsWith("http")) {
        files.push(session.attachment);
      }

      try {
        await webhook.send({
          content: session.content || undefined,
          embeds: session.embeds,
          files: files.length > 0 ? files : undefined,
        });

        logAdmin(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} –æ—Ç–ø—Ä–∞–≤–∏–ª embed —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫`
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫:", error);
        await interaction.reply({
          content: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
          ephemeral: true,
        });
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client.on("error", (error) => {
  console.error("–û—à–∏–±–∫–∞ Discord –∫–ª–∏–µ–Ω—Ç–∞:", error);
});

process.on("unhandledRejection", (error) => {
  console.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:", error);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.login(process.env.TOKEN);
